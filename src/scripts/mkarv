#!/usr/bin/env python

from __future__ import print_function

import argparse
import collections
import csv
import decimal
import gzip
import json
import logging
import os.path
import re
import shutil
import sys
import tempfile
import textwrap


LOGGING_FORMAT = '%(message)s'
PROGRAM = 'mkarv'
PROGRAM_VERSION = '{{VERSION}}'

METADATA_FIELDS = [
    'name',
    'organism',
    'library',
    'description',
    'metrics_url',
    'web_url',
]

METRICS_EXTENSION_RE = re.compile('\.json(\.gz)?$')


class DecimalEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, decimal.Decimal):
            return float(obj)
        return json.JSONEncoder.default(self, obj)


def open_maybe_gzipped(filename):
    """
    Open a possibly gzipped file.

    Parameters
    ----------
    filename: str
        The name of the file to open.

    Returns
    -------
    file
        An open file object.
    """
    with open(filename, 'rb') as test_read:
        byte1, byte2 = test_read.read(1), test_read.read(1)
        if byte1 and ord(byte1) == 0x1f and byte2 and ord(byte2) == 0x8b:
            f = gzip.open(filename, mode='rt')
        else:
            f = open(filename, 'rt')
    return f


def locate_template_directory(start):
    start_dir = os.path.abspath(
        os.path.join(
            os.path.dirname(start),
            os.path.dirname(os.path.islink(start) and os.readlink(start) or start)
        )
    )
    template_dir = os.path.normpath(os.path.join(start_dir, '../web'))
    return template_dir


def parse_arguments():
    parser = argparse.ArgumentParser(
        prog=PROGRAM,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description=textwrap.dedent("""
        Given one or more ataqv metrics files in JSON format, creates
        an instance of the ataqv result visualization tool. The web
        application is copied into the named directory, and the JSON
        results are translated for it. The resulting directory can be
        loaded into a web browser locally by opening the index.html
        file, or published with a web server like Apache or nginx.
        """) + '\n\n'
    )

    parser.add_argument('-f', '--force', action='store_true', help='Overwrite the output directory if it exists.')
    parser.add_argument('-d', '--delete', action='store_true', help='With --force, replaces the output directory without backing it up first.')
    parser.add_argument('-i', '--indent', action='store_true', help='If indent is given, JSON output will be pretty-printed and indented.')
    parser.add_argument('-m', '--maximum-fragment-length', type=int, default=1000, help='The maximum fragment length for which the distance to the reference fragment length count distribution will be measured.')

    parser.add_argument('-r', '--reference', default="calculate", help=(
        """A reference fragment length count distribution. It can """
        """be supplied as "calculate", the default, in which case a"""
        """distance will be calculated for each set of metrics """
        """from a reference distribution constructed from the rest """
        """of the given metrics. It can also be the name of a file """
        """containing a reference distribution. This file may be in """
        """JSON format, containing an object mapping fragment """
        """lengths to counts (e.g. "{0: 0, 1: 10, 2: 17}", or it """
        """may be a tab- or comma-separated value file in which """
        """each line contains a fragment length and count. It may"""
        """also be specified as "SRR891268", in which case the """
        """fragment length distribution from that sample in the """
        """ATAC-seq paper will be used as the reference."""
    ))

    parser.add_argument('-t', '--template-directory', default=locate_template_directory(sys.argv[0]), help=("""The location of the web app directory template."""))

    parser.add_argument('-v', '--verbose', action='store_true', help='Talk more.')
    parser.add_argument('--version', action='version', version=PROGRAM_VERSION)
    parser.add_argument('directory', help=('The path to the directory where the web app will be created.'))
    parser.add_argument('metrics', nargs='*', help='One or more ataqv metrics files in JSON format.')

    return parser.parse_args()


def construct_reference_distribution(data, max_fragment_length):
    """
    Construct a reference fragment length density distribution from all metrics in `data`.
    """
    metrics = data.values()
    metrics_count = len(metrics)

    reference_distribution = collections.defaultdict(long)
    for m in metrics:
        for fragment_length, count, fraction_of_total_reads in m['fragment_length_counts']:
            if fragment_length <= max_fragment_length:
                reference_distribution[fragment_length] += count

    for fragment_length, count in reference_distribution.items():
        reference_distribution[fragment_length] /= metrics_count

    return {
        'source': 'Calculated from ' + ', '.join(sorted([m['name'] for m in metrics])),
        'distribution': reference_distribution
    }


def make_cdf(fragment_length_distribution):
    """
    Returns the cumulative distribution function of a map of fragment lengths to counts.
    """
    counts = [count for fragment_length, count in sorted(fragment_length_distribution.items())]
    cdf = []
    total_counts = 1.0 * sum(counts)
    cumulative_probability_at_fragment_length = 0.0
    for count in counts:
        cumulative_probability_at_fragment_length += (count / total_counts)
        cdf.append(cumulative_probability_at_fragment_length)
    return cdf


def calculate_fragment_length_distance(metrics, reference_distribution, max_fragment_length):
    """
    Calculate the distance to the reference fragment length distribution.

    The distance is the largest difference between the cumulative
    distribution functions of the two fragment length distributions, truncated to the
    """

    distance = 0

    reference_cdf = make_cdf(reference_distribution)

    nonreference_counts = {fragment_length: count for fragment_length, count, fraction_of_total_reads in metrics['fragment_length_counts'] if fragment_length <= max_fragment_length}
    nonreference_cdf = make_cdf(nonreference_counts)

    diff = map(lambda x: x[0] - x[1], zip(nonreference_cdf, reference_cdf))
    distance = (abs(max(diff)) > abs(min(diff))) and max(diff) or min(diff)

    return distance


def calculate_fragment_length_distances(data, reference, max_fragment_length):
    if reference == 'calculate':
        reference_distribution = construct_reference_distribution(data, max_fragment_length)
    elif reference == 'SRR891268':
        reference_distribution = {
            'source': 'The fragment length distribution from SRR891268',
            'distribution': {}
        }
    else:
        if not os.path.exists(reference):
            raise ValueError('The given reference file ("{}") does not exist.'.format(reference))

        loaded_distribution = {}
        try:
            loaded_distribution = {int(k): int(v) for k, v in json.load(open_maybe_gzipped(reference)).items()}
        except:
            with open(reference, 'rb') as f:
                dialect = csv.Sniffer().sniff(f.read(1024))
                f.seek(0)
                reader = csv.reader(f, dialect)
                loaded_distribution = {int(row[0]): int(row[1]) for row in reader}

        # check for holes in the supplied reference
        for fragment_length in range(max_fragment_length):
            if fragment_length not in loaded_distribution:
                logging.warn('Reference distribution from {} lacks density at fragment length {}; assigning zero'.format(reference, fragment_length))

        # adjust the distribution to the requested maximum fragment length
        cleaned_distribution = collections.defaultdict(long)
        for fragment_length, count in loaded_distribution.items():
            if fragment_length <= max_fragment_length:
                cleaned_distribution[fragment_length] = count

        reference_distribution = {
            'source': 'Loaded from ' + reference,
            'distribution': cleaned_distribution
        }

    for name, metrics in sorted(data.items()):
        metrics['fragment_length_distance'] = {
            'reference': reference_distribution,
            'distance': calculate_fragment_length_distance(metrics, reference_distribution['distribution'], max_fragment_length)
        }

        data[name] = metrics


PERCENTAGES = {
    'hqaa': 'total_reads',
    'properly_paired_and_mapped_reads': 'total_reads',
    'secondary_reads': 'total_reads',
    'supplementary_reads': 'total_reads',
    'duplicate_reads': 'total_reads',
    'unmapped_reads': 'total_reads',
    'unmapped_mate_reads': 'total_reads',
    'qcfailed_reads': 'total_reads',
    'unpaired_reads': 'total_reads',
    'reads_mapped_with_zero_quality': 'total_reads',
    'rf_reads': 'total_reads',
    'ff_reads': 'total_reads',
    'rr_reads': 'total_reads',
    'reads_with_mate_mapped_to_different_reference': 'total_reads',
    'reads_with_mate_too_distant': 'total_reads',
    'reads_mapped_and_paired_but_improperly': 'total_reads',
    'total_autosomal_reads': 'total_reads',
    'duplicate_autosomal_reads': 'total_autosomal_reads',
    'total_mitochondrial_reads': 'total_reads',
    'duplicate_mitochondrial_reads': 'total_mitochondrial_reads',
}

def prepare_for_viewer(data):
    for name, metrics in data.items():
        del metrics['peaks']
        del metrics['peaks_fields']

        metrics['percentages'] = {}
        for numerator, denominator in PERCENTAGES.items():
            key = '{}__{}'.format(numerator, denominator)
            if metrics[denominator] == 0:
                metrics['percentages'][key] = None
            else:
                metrics['percentages'][key] = float(metrics[numerator]) / metrics[denominator] * 100.0;


if __name__ == '__main__':
    args = parse_arguments()

    loglevel = args.verbose and logging.DEBUG or logging.INFO
    logging.basicConfig(level=loglevel, format=LOGGING_FORMAT)
    logger = logging.getLogger(PROGRAM)

    if os.path.exists(args.directory):
        if not args.force:
            logger.error("""Output directory {} already exists. I won't overwrite it unless given the --force argument.""".format(args.directory))
            sys.exit(1)
        else:
            if args.delete:
                shutil.rmtree(args.directory)
            else:
                backup_dir = tempfile.mkdtemp(prefix=args.directory + '.', dir=os.path.dirname(args.directory))
                logger.info('Moving existing directory {} to {}.'.format(args.directory, backup_dir))
                os.rename(args.directory, backup_dir)

    for metrics_filename in args.metrics:
        if not os.path.exists(metrics_filename):
            logger.error('Error: metrics file {} not found'.format(metrics_filename))
            sys.exit(1)

    logger.info('Copying web visualizer template directory to {}'.format(args.directory))
    shutil.copytree(args.template_directory, args.directory)

    data_directory = os.path.join(args.directory, 'data')
    logger.info('Creating data directory {}'.format(data_directory))
    os.makedirs(data_directory, 0755)

    data = {}

    for metrics_filename in args.metrics:
        logger.info('Adding metrics file {}'.format(metrics_filename))
        mf = open_maybe_gzipped(metrics_filename)
        try:
            collection = json.load(mf)
            for result in collection:
                metrics = result['metrics']
                name = metrics['name']

                metrics_filename = os.path.join(data_directory, '{}.json.gz'.format(metrics['name']))
                metrics['metrics_filename'] = metrics_filename
                metrics['metrics_url'] = os.path.join('data', os.path.basename(metrics_filename))

                data[name] = metrics

        except ValueError as e:
            logger.error('Could not add metrics file {}: {}'.format(metrics_filename, e))
            continue

    if args.reference == 'calculate':
        logger.info('Constructing a reference fragment length distribution from your input.')
    elif args.reference == 'SRR891268':
        logger.info('Using SRR891268 as the reference fragment length distribution.')
    else:
        logger.info('Loading the reference fragment length distribution from {}.'.format(args.reference))

    calculate_fragment_length_distances(data, args.reference, args.maximum_fragment_length)

    indent = args.indent and 1 or None
    for name, metrics in sorted(data.items()):
        logger.info('Writing {} metrics to {}'.format(name, metrics['metrics_filename']))

        with gzip.open(metrics['metrics_filename'], 'w', 9) as data_file:
            del metrics['metrics_filename']

            json.dump([metrics], data_file, sort_keys=True, indent=indent)

        data[name] = metrics

    logger.info('Adding viewer-specific metrics...'.format(name))
    prepare_for_viewer(data)

    data_filename = os.path.join(args.directory, 'js/data.js')
    logger.info('Writing data for ataqv viewer to {}'.format(data_filename))
    with open(data_filename, 'w') as data_file:
        data_file.write('ataqv.setMetrics({});'.format(json.dumps(data, sort_keys=True, indent=indent, separators=[',', ':'], cls=DecimalEncoder)))
